# LibraryFind - Quality find done better.
# Copyright (C) 2007 Oregon State University
# Copyright (C) 2009 Atos Origin France - Business Solution & Innovation
# 
# This program is free software; you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation; either version 2 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with 
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
# Place, Suite 330, Boston, MA 02111-1307 USA
#
# Questions or comments on this program may be addressed to:
#
# Atos Origin France - 
# Tour Manhattan - La DÃ©fense (92)
# roger.essoh@atosorigin.com
#
# http://libraryfind.org

RAILS_ROOT = "#{File.dirname(__FILE__)}/.." unless defined?(RAILS_ROOT)

if ENV['LIBRARYFIND_HOME'] == nil: ENV['LIBRARYFIND_HOME'] = "../" end
require ENV['LIBRARYFIND_HOME'] + 'config/environment.rb'

class Control < ActiveRecord::Base
end

class Collection < ActiveRecord::Base
end

class Metadata < ActiveRecord::Base
end

class CommonHarvester
  require 'rubygems'
  require 'yaml'
  require 'iconv'
	require 'solr'

  attr_accessor :logger
  
  def check_nil(s)
		s = "" if s.nil?
		s
  end
  
  def checknil(s)
		s = "" if s.nil?
		s
  end
  
  # Constructor method - initialize variables
  def initialize(type = nil)

    @logger = ActiveRecord::Base.logger
    @db = YAML::load_file(ENV['LIBRARYFIND_HOME'] + "config/database.yml")
		@dbtype = type.nil? ? 'development' : type
    @reharvest = true
    
    case PARSER_TYPE
    when 'libxml'
     	require 'xml/libxml'
    when 'rexml'
     	require 'rexml/document'
 		when 'nokogiri'
	 		require 'nokogiri'
   	else
     	require 'rexml/document'
   	end
   
		solr = Parameter.by_name('solr_harvesting')
		authorities_solr = Parameter.by_name('authorities_solr')
		mysql = Parameter.by_name('mysql_harvesting')
		@replication_activated = Parameter.by_name('replication_activated')
		@replication_auto = Parameter.by_name('restart_replication_auto')
		@local_indexer = 'solr'
    @index = Solr::Connection.new(solr, {:timeout => CFG_LF_TIMEOUT_SOLR})
    @index_authorities = Solr::Connection.new(authorities_solr, {:timeout => CFG_LF_TIMEOUT_SOLR})

    @logger.debug("Timeout set to : #{CFG_LF_TIMEOUT_SOLR}")
    @logger.debug("SOLR HOST: " + solr)
    @logger.debug("DATABASE HOST " + @db[@dbtype]["host"])
    @logger.debug("DATABASE INFO: " + @db[@dbtype]["database"])

		@db = {
      :adapter 	=> @db[@dbtype]["adapter"],
      :host 		=> mysql,
      :username => @db[@dbtype]["username"],
      :password => @db[@dbtype]["password"],
      :database => @db[@dbtype]["database"],
		}
		ActiveRecord::Base.establish_connection(@db)
  end
  
  # Initalize variables
  :protected
  def init_config
    @logger.info("**** Initalizing production and development database configurations ****")
    @pusername= @db['production']['username']
    @ppassword = @db['production']['password']
    @pdatabase = @db['production']['database']
    @phost = @db['production']['host']
    
    @dusername = @db['development']['username']
    @dpassword = @db['development']['password']
    @ddatabase = @db['development']['database']
    @dhost = @db['development']['host']
  end

	# Enable / disable solr replication
	:protected
	def solr_replication(command)
		msg = Parameter.solr_replication(command)
		return msg
		@logger.info msg
	end

	# Enable / disable mysql replication
	:protected 
	def mysql_replication(command)
		mysql1 = Parameter.by_name('mysql1')
		mysql2 = Parameter.by_name('mysql2')
		[mysql1, mysql2].each do |mysql|
			msg = Parameter.mysql_replication(mysql, command)
			@logger.info msg
		end
	end

  # Grab the production environment indexes and data and store in test 
  :protected
  def backup_database
    init_config if @pusername.nil?
    begin
      @logger.info("Backing up database production")
      success = system("mysqldump --opt #{@pdatabase} -h #{@phost} > #{ENV['LIBRARYFIND_HOME']}/components/backup/database_#{Time.now().to_i}.sql -u#{@pusername} --password=#{@ppassword}")
      @logger.info("success:" + success.to_s)
      raise "No backup save !" unless success
    rescue Exception => e
      @logger.error(e.message)
      raise e
    end
  end
  
  # Send the index to solr
  :protected
  def commit
    begin
      @index.send(Solr::Request::Commit.new)
      @index = Solr::Connection.new(Parameter.by_name('solr_harvesting'), {:timeout => CFG_LF_TIMEOUT_SOLR})
    rescue => err
      @logger.error("[#{self.class}] error committing to solr : #{err.message}")
      @logger.error("[#{self.class}] error committing to solr : #{err.backtrace.join('\n')}")
    end
  end
  
  :protected
  def save_log
    begin
      @logger.info("Update statistics")
      SaveLog.new
    rescue => e
      @logger.error("Errors statistics : #{e.message}")
    end
  end
  
  :protected
  def update_notice(idD, dctitle, dccreator, dctype, ptitle, update_date)
    begin
      notice = Notice.getNoticeByDocId(idD)
      unless notice.nil?
        notice.dc_title = dctitle
        notice.dc_author = dccreator
        notice.dc_type = dctype
        notice.ptitle = ptitle
        notice.update_date = update_date
        notice.save
      end
    rescue => e
      @logger.error("[CommonHarvester][update_notice] Error : " + e.message)
      @logger.error("[CommonHarvester][update_notice] Trace : " + e.backtrace.join("\n"))
      raise e
    end
  end
  
  def clean_solr_index(collection_id, ids = nil)
    if ids.nil? or ids.empty?
      @index.send(Solr::Request::Delete.new(:query => "collection_id:(#{collection_id.to_s})"))
    else
      ids.each do |id|
        query = "id:(#{id};#{collection_id})"
        @index.send(Solr::Request::Delete.new(:query => query))
      end
    end
		@index.send(Solr::Request::Commit.new)
  end
  
  def clean_sql_data(collection_id, ids = nil)
    if ids.nil? or ids.empty?
      ActiveRecord::Base.connection.execute("delete from controls where collection_id=#{collection_id}")
      ActiveRecord::Base.connection.execute("delete from metadatas where collection_id=#{collection_id}")
      ActiveRecord::Base.connection.execute("delete from volumes where collection_id=#{collection_id}")
    else
      ActiveRecord::Base.connection.execute("delete from controls where collection_id=#{collection_id} and oai_identifier in (#{ids.join(",")})")
      ActiveRecord::Base.connection.execute("delete from metadatas where collection_id=#{collection_id} and dc_identifier in (#{ids.join(",")})")
      ActiveRecord::Base.connection.execute("delete from volumes where collection_id=#{collection_id} and dc_identifier in (#{ids.join(",")})")
    end
  end
  
end
